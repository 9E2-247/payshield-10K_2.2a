swagger: "2.0"
info:
  description: |
    
    ## Summary
    This document describes all of the endpoints available to the hosted payShield service provider using the Out of Band (OOB) remote management API over the AUX interface.
    The OOB API are categorized as follows: **Interfaces**, **Upload**, **Device Status**, **Logging**, **Provisioning**, **System Commands** and **Certificate**.
    
      ### Interfaces
      * The Interfaces API endpoints provide a mechanism for viewing and changing the interface details of the three available interfaces:
        * AUX
        * HOST
        * MGMT

      * The interface settings can be viewed by the service provider whether the device is under the service provider's control or end user's control.

      * API endpoints which change interface settings are possible whether the device is under the service provider's control or end user's control.

      ### Upload
      * The Upload API endpoints enable the service provider to upload and install a known image or license on the device.

      * The firmware Upload API endpoint will only be available while the device is fully under the service provider's control.
      ### Device Status
      * The Device Status API endpoints allow the service provider to assess the health and characteristics of the device such as the serial number, firmware details or Field Replacement Unit health

      * The Device Status API endpoints that fetch information of the device are available whether the device is under the service provider's control or end user's control.

      * Some Device Status API endpoints allow specific settings to be changed, including time, motion alarm and maintenance indicator. These API endpoints are only available when the device is under the service provider's control, with the exception of the Maintenance Indicator API, which is available regardless of who controls the device.

      ### Logging
      * The Logging API endpoints allow the service provider to inspect and clear various log types

      * Audit Logging API endpoints will be available whether the device is under the service provider's control or end user's control.

      * Error Logging API endpoints will only be available while the device is under the service provider's control.

      ### Provisioning
      * The Provisioning API endpoints allow the service provider to manage the deployment cycle of the device.

      * The Provisioning API endpoints are available in all provisioning states.  

      ### Certificate
      * The Certificate API Endpoints allow managing of the OOB Server's TLS certificate lifecycle.
    
    ## Security

      ### HTTPS
      The OOB management solution is secured by TLS 1.2 using a self-signed certificate generated by the payShield.  This certificate will be used to secure all communications with the OOB server.
    
      ### Isolation
      The webserver that processes the OOB management API endpoints is a separate process logically isolated from the webserver that hosts payShield Manager.

      This is accomplished with the following mechanisms:
      * payShield Manager and OOB management are servers running in separate processes and on separate physical interfaces
      * Traffic on those interfaces is logically separated by routing tables

      ### Authentication and Authorization
      Certificate-based Mutual Authentication using TLS 1.2 is used for securing and authenticating the OOB interface i.e. authenticating the OOB client with the payShield for OOB management. 
      Keys & certificates are exchanged between client and OOB server through the attestation process.

    ## Versioning
      Semantic versioning is used to track changes to the API. \<MAJOR>.\<MINOR>.\<PATCH>, with the Major version used as a prefix in the URI.
      If you omit the version-prefix, the latest version of the API is used. If the API version specified in the URL is not supported a HTTP 400 Bad Request   error message is returned.
      Minor version changes will not break backward-compatibility. Major version changes may introduce API incompatibility between versions.
      The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties.
      When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.

  version: "1.1.0"
  title: "Hosted payShield 10K Out of Band management API"
basePath: "/system/v1"
schemes:
- "https"
paths:
  /interface/management:
    post:
      tags:
      - "Interface Settings"
      summary: "Change the MGMT interface settings"
      description: |
        Change the MGMT interface settings to those specified in the body.
        **Must** specify whether DHCP is enabled or disabled.
        If DHCP is enabled, must **only** provide a network host name.
        If DHCP is not enabled, must **only** provide an IP address, netmask and gateway.
        **Must** always specify a link speed.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "changeManagement"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "MGMT interface settings"
        required: true
        schema:
          $ref: "#/definitions/postInterface"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    get:
      tags:
      - "Interface Settings"
      summary: "View the MGMT interface settings"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "viewManagement"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/getInterface"
  /interface/host:
    post:
      tags:
      - "Interface Settings"
      summary: "Change the HOST interface settings"
      description: |
        Change the HOST interface settings to those specified in the body.
        **Must** specify whether DHCP is enabled or disabled.
        If DHCP is enabled, must **only** provide a network host name.
        If DHCP is not enabled, must **only** provide an IP address, netmask and gateway.
        **Must** always specify a link speed.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "changeHost"
      consumes:
      - "application/json"
      parameters:
        - in: "query"
          name: "id"
          description: "The HOST interface to change"
          required: true
          type: integer
          minimum: 1
          maximum: 2
        - name: "body"
          in: "body"
          description: "HOST interface settings"
          required: true
          schema:
            $ref: "#/definitions/postInterface"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    get:
      tags:
      - "Interface Settings"
      summary: "View the HOST interface settings"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "viewHost"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "id"
          description: "The HOST interface to query"
          required: true
          type: integer
          minimum: 1
          maximum: 2
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/getInterface"
  /interface/aux:
    post:
      tags:
      - "Interface Settings"
      summary: "Change the AUX interface settings"
      description: |
        Change the AUX interface settings to those specified in the body.
        **Must** specify whether DHCP is enabled or disabled.
        If DHCP is enabled, must **only** provide a network host name.
        If DHCP is not enabled, must **only** provide an IP address, netmask and gateway.
        **Must** always specify a link speed.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "changeAux"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "AUX interface settings"
        required: true
        schema:
          $ref: "#/definitions/postInterface"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    get:
      tags:
      - "Interface Settings"
      summary: "View the AUX interface settings"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "viewAux"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/getInterface"
  /upload/firmware:
    post:
      tags:
      - "Upload"
      summary: "Upload new firmware to the device"
      description: |
        ## States: 
        * DataCenter
      operationId: "uploadFirmware"
      consumes:
      - "application/octet-stream"
      - "multipart/form-data"
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The update file to upload.
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Status"
  /upload/license:
    post:
      tags:
      - "Upload"
      summary: "Upload a new license to the device"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "uploadLicense"
      consumes:
      - "application/octet-stream"
      - "multipart/form-data"
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The license file to upload.
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Status"
  /status/info:
    get:
      tags:
      - "Device Status"
      summary: "Get general information about the payShield device"
      description: |
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getInfo"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              manufacturer:
                type: string
                description: "Device's manufacturer"
                example: "Thales"
              modelNumber:
                type: string
                description: "Model number of the unit"
                example: "PS10-D"
              serialNumber:
                type: string
                description: "Device's serial number"
                example: "S0000000001G"
              manufacturingDate:
                type: string
                description: "Date the unit was manufactured"
                example: "2019-05-21"
                format: date
              hardwareVersion:
                type: string
                description: "Device's hardware version"
                example: "0x00000000"
              keylockState:
                type: string
                description: |
                  State of the physical keylock's
                  * States:
                    * Locked
                    * Unlocked
                    * Config
                    * Unknown
                example: "Locked"
              upTime:
                type: object
                description: "Time since last reboot"
                properties:
                  days:
                    type: integer
                    example: 1
                  hours:
                    type: integer
                    example: 1
                  minutes:
                    type: integer
                    example: 1
                  seconds:
                    type: integer
                    example: 1
  /status/firmware:
    get:
      tags:
      - "Device Status"
      summary: "Get firmware information"
      description: |
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getFirmwareInfo"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              baseRelease:
                type: string
                description: "The base release name"
                example: "1.1a"
              revision:
                type: string
                description: "Revision of the firwmare"
                pattern: '^\d{4}-\d{4}$'
                example: "1500-0023"
              firmwareVersion:
                type: string
                description: "Firmware version"
                example: "1.4.0"
              deploymentVersion:
                type: string
                description: "Deployment version"
                example: "1.4.0"
              cpldVersion:
                type: string
                description: "The version of the CPLD"
                example: "1.2.3"
              bootstrapVersion:
                type: string
                description: "The version of the bootstrap"
                example: "1.1.40"
              senprocVersion:
                type: string
                description: "The version of the sensor processor"
                example: "1.1.29"
              senprocBootVersion:
                type: string
                description: "The version of the sensor processor bootloader"
                example: "1.0.0"
  /status/licenses:
    get:
      tags:
      - "Device Status"
      summary: "Get license information"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getLicense"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              performance:
                type: string
              package:
                type: string
              licenses:
                type: array
                items:
                  type: string
              optional licenses:
                type: array
                items:
                  type: string
  /status/self-test:
    get:
      tags:
      - "Device Status"
      summary: "Get last self-test run results"
      description: |
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getSelfTestResults"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              timeOfDay:
                type: integer
                description: "The number of minutes after midnight when the self-test begins"
                example: "540"
              passed:
                type: boolean
                description: "True if all the diagnostic tests in the last run self-test passed"
                example: false
              count:
                type: integer
                description: "The number of diagnostic tests in the last run self-test"
                example: 17
              results:
                type: string
                description: "The complete results of the last run self-test"
                example: "DES:PASSED;AES:PASSED;ECDSA:PASSED;HMAC:PASSED;MD5:PASSED;SHA:PASSED;RSA:PASSED;RNG:PASSED;RTC:PASSED;Memory:PASSED;Power:FAILED;Battery:PASSED;Fans:FAILED;Temperature:PASSED;Voltage:PASSED;udpServer:PASSED;tcpServer:PASSED;"
  /status/tamper:
    get:
      tags:
      - "Device Status"
      summary: "Get tamper information"
      description: |
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getTamperInfo"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              tampered:
                type: boolean
                description: "Device's current tamper state"
                example: true
              tamperCause:
                type: string
                description: "Cause of tamper"
                example: "Case Tampered"
              tamperDate:
                type: string
                description: "Date and time of tamper"
                example: "2019-10-01T14:18:42Z"
                format: date-time
  /status/time:
    post:
      tags:
      - "Device Status"
      summary: "Set the current time of the payShield"
      description: |
        Sets the current time of the device to the specified time.  The specified time must be seconds from Jan 1, 1970 (epoch time).
        The time **must be set to GMT time**
        # Warning:
          Changing the time of the device may affect system operations like certificate verification.
        ## States:
        * DataCenter
      operationId: "setTime"
      parameters:
        - in: "body"
          name: "epochTime"
          required: true
          schema:
            type: object
            properties:
              epochTime:
                type: integer
                example: 1564070277
                description: "Time in seconds since January 1, 1970"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    get:
      tags:
      - "Device Status"
      summary: "Get the current time of the payShield"
      description: |
        The time on the payShield is **always GMT**. 
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getTime"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              epochTime:
                type: integer
                description: "Time in seconds since January 1, 1970"
  /status/maintenanceIndicator:
    post:
      tags:
      - "Device Status"
      summary: "Change the status of the maintenance indicator light on the front and rear of the payShield"
      description: |
        The maintenance indicator lights are small blue LEDs which illuminate the serial number of the unit and an indicator on the rear.
        Turning them on is useful for data center administrators as it allows them to quickly identify which unit needs to be serviced,
        for example hot swapping a fan or power supply unit.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "setIndicator"
      parameters:
        - in: "body"
          name: "enabled"
          schema:
            type: "object"
            required:
            - "enabled"
            properties:
              enabled:
                type: boolean
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    get:
      tags:
      - "Device Status"
      summary: "View the status of the maintenance indicator light on the front and rear of the payShield"
      description: |        
        The maintenance indicator lights are small blue LEDs which illuminate the serial number of the unit and an indicator on the rear.
        Turning them on is useful for data center administrators as it allows them to quickly identify which unit needs to be serviced,
        for example hot swapping a fan or power supply unit.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getIndicator"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              enabled:
                type: boolean
                description: "Whether the maintenance indicator light is on or off."
  /status/motionAlarm:
    post:
      tags:
      - "Device Status"
      summary: "Set the motion alarm sensitivity of the payShield"
      description: |
        ## States: 
        * DataCenter
      operationId: "setAlarm"
      parameters:
        - in: "body"
          name: "motion"
          schema:
            type: "object"
            required:
            - "motion"
            properties:
              motion:
                type: string
                example: "off"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    get:
      tags:
      - "Device Status"
      summary: "Get the motion alarm sensitivity of the payShield"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getAlarm"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              motion:
                type: string
                description: "Whether the motion alarm is off/low/medium/high."
                example: "off"
  /status/fans:
    get:
      tags:
      - "Device Status"
      summary: "Get fan status information"
      operationId: "getFans"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              fans:
                type: array
                items:
                  $ref: "#/definitions/fanStatus"
  /status/psu:
    get:
      tags:
      - "Device Status"
      summary: "Get power supply status information"
      operationId: "getPSU"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              powerSupplies:
                type: array
                items:
                  $ref: "#/definitions/psuStatus"
  /status/battery:
    get:
      tags:
      - "Device Status"
      operationId: "getBattery"
      summary: "Get battery status information"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              status:
                type: string
                description: "The health of the battery"
                example: "OK"
              expected:
                type: integer
                description: "Target voltage of the battery in millivolts"
                example: "3600"
              actual:
                type: integer
                description: "Actual voltage of the battery in millivolts"
                example: "3695"
              deviation:
                type: integer
                description: "Percent deviation from expected voltage of the battery"
                example: "2"
  /status/temps:
    get:
      tags:
      - "Device Status"
      operationId: "getTemps"
      summary: "Query temperature sensors"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              status:
                type: string
                description: "The health of the temperature sensors"
                example: "OK"
              msp:
                $ref: "#/definitions/Sensor"
              main:
                type: object
                properties:
                  1:
                     $ref: "#/definitions/Sensor"
                  2:
                     $ref: "#/definitions/Sensor"
              crypto:
                $ref: "#/definitions/Sensor"
              ts:
                type: object
                properties:
                  1:
                     $ref: "#/definitions/Sensor"
                  2:
                     $ref: "#/definitions/Sensor"
                  3:
                     $ref: "#/definitions/Sensor"
  /status/voltages:
    get:
      tags:
      - "Device Status"
      operationId: "getVoltages"
      summary: "Query voltage sensors"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              status:
                type: string
                description: "The health of the voltage sensors"
                example: "OK"
              v12:
                $ref: "#/definitions/Sensor"
              v5:
                $ref: "#/definitions/Sensor"
              main:
                $ref: "#/definitions/Sensor"
              crypto:
                $ref: "#/definitions/Sensor"
              msp:
                $ref: "#/definitions/Sensor"
              battery:
                $ref: "#/definitions/Sensor"
  /status/performance:
    put:
      tags:
      - "Device Status"
      summary: "Set CPS, LMK or both to alter performance"
      description: |
        Change CPS and/or LMK performance settings
        ## States:
          * DataCenter
          * Allocated
          * EndUser
      operationId: "setPerf"
      consumes:
      - "application/json"
      parameters:
        - name: Update performance
          in: body
          description: Set CPS and LMK
          required: true
          schema:
            $ref: '#/definitions/performanceValues'
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              CPS:
                type: integer
                description: "CPS value to be set"
                example: 60
              LMK:
                type: integer
                description: "LMK value to be set"
                example: 5
    get:
      tags:
      - "Device Status"
      operationId: "getPerf"
      summary: "Get CPS or LMK value"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "perfVal"
          description: "The CPS/LMK value to query"
          required: true
          type: string
          enum:
            - "CPS"
            - "LMK"
      responses:
        "401":
          description: "Not Authorized"
        "405":
          description: "Method not allowed"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              CPS:
                type: integer
                description: "CPS value to be set"
                example: 60
              LMK:
                type: integer
                description: "LMK value to be set"
                example: 5
  /logs/errorlog/count:
    get:
      tags:
      - "Logging"
      summary: "Get total number of error logs"
      description: |
        ## States:
        * DataCenter
        * Allocated
      operationId: "getErrorLogCount"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"      
        "500":
          description: "Internal error getting the error log count"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              total:
                type: integer
                description: "Total number of error logs"
                example: "10"
  /logs/auditlog/count:
    get:
      tags:
      - "Logging"
      summary: "Get total number of service provider audit logs"
      description: |
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getAuditLogCount"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"      
        "500":
          description: "Internal error getting the audit log count"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              total:
                type: integer
                description: "Total number of service provider audit logs"
                example: "100"
  /logs/errorlog/download:
    get:
      tags:
      - "Logging"
      summary: "Download the error log from the payShield. Error log can be downloaded only once every 20 seconds."
      description: |
        ## States: 
        * DataCenter
        * Allocated
      operationId: "downloadErrorLog"
      produces:
      - "application/octet-stream"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "429":
          description: "Too Many Requests"
        "500":
          description: "Internal error retrieving the error log"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: file
  /logs/auditlog/download:
    get:
      tags:
      - "Logging"
      summary: "Download the service provider audit log from the payShield. Audit log can be downloaded only once every 20 seconds."
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "downloadAuditLog"
      produces:
      - "application/octet-stream"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "429":
          description: "Too Many Requests"
        "500":
          description: "Internal error retrieving the audit log"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: file
  /logs/enduser/download:
    get:
      tags:
      - "Logging"
      summary: "Download the end user log archive with end user audit log and error log from the payShield. Log archive can be downloaded only once every 20 seconds in tampered state."
      description: |
        ## States: 
        * Tampered
      operationId: "downloadEndUserLog"
      produces:
      - "application/octet-stream"
      responses:
        "401":
          description: "Not Authorized"
        "405":
          description: "Not Allowed"
        "429":
          description: "Too Many Requests"
        "500":
          description: "Internal error retrieving the end user log"
        "200":
          description: "Success"
          schema:
            type: file
  /logs/errorlog/clear:
    post:
      tags:
      - "Logging"
      summary: "Clears the error log in the payShield"
      description: |
        ## States: 
        * DataCenter
      operationId: "clearErrorLog"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal error clearing the error log"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
  /logs/auditlog/clear:
    post:
      tags:
      - "Logging"
      summary: "Clears the service provider audit log in the payShield"
      description: |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "clearAuditLog"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal error clearing the audit log"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
  /provisioning/state:
    get:
      summary: "View the current provisioning state"
      tags:
      - "Provisioning"
      operationId: "getState"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              state:
                type: string
                enum:
                - "DataCenter"
                - "Allocated"
                - "EndUser"
                description: "The provisioning state of the device"
                example: "DataCenter"
  /provisioning/allocate:
    post:
      tags:
      - "Provisioning"
      summary: "Enter the allocated state"
      description:  |
        ## States: 
        * DataCenter
      operationId: "setAllocate"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Status"
  /provisioning/reclaim:
    post:
      tags:
      - "Provisioning"
      summary: "Reclaim device (erase end user data and return to DataCenter state)"
      description:  |
        Reclaiming the device will return it back to DataCenter state and factory reset end-user configurations, keys, and data.
        Specifically, the following will be removed or reset to factory default:
        ### Configurations
        * Host Application Configuration
        * MIB2 Settings
        * Security Settings
        * SNMP settings
        * Pinblock Settings
        * payShield Manager Settings
        * Fraud Settings
        * Self test settings
        ### Networking
        * Host IP will be set to static IP address 169.254.254.1
        * Management IP will be set to static IP address 169.254.254.1
        ### Key Material
        * LMKs
        * KTKs
        * payShield Manager keys and certificates
        * Host Application TLS keys and certificates
        * Encrypted keys in user storage
        * HSM Recover Key (HRK)
        ### Logs
        * End User audit Log
        ### Miscellaneous
        * Utilization History
        * Application Health Diagnostics

        ## States: 
        * Allocated
        * EndUser
      operationId: "reclaimDevice"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              status:
                type: "string"
                description: "The result of the operation"
              reason:
                type: "string"
                description: "Reason for the result of the operation"
  /system/reboot:
    post:
      summary: "Reboots the unit"
      tags:
      - "System"
      operationId: "reboot"
      description:  |
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
  /certificate/server/createCsr:
    post:
      tags:
      - "Certificate"
      summary: "Generate a new ECC 384 keypair and download the associated Certificate Signing Request (CSR)"
      description:  |
        Generates a new ECC 384 keypair and CSR and send the CSR to be downloaded.  
        The CSR will contain the user supplied Subject and subjectAlternativeNames
        It will also contain the following v3 extensions:
        X509v3 Basic Constraints: critical
            CA:FALSE
        X509v3 Key Usage: critical
            Digital Signature, Key Encipherment
        X509v3 Extended Key Usage: critical
            TLS Web Server Authentication
        ## States: 
        * DataCenter
        * Allocated
        * EndUser      
      operationId: "createCsr"
      produces:
        - application/octet-stream
      parameters:
        - in: "body"
          name: "CSR"
          required: true
          schema:
            type: object
            properties:
              subject:
                type: object
                required:
                - "Country"
                - "State"
                - "Location"
                - "Organization"
                - "OrganizationalUnit"
                - "Email"
                - "CommonName"
                properties: 
                  Country:
                    type: string
                    example: "US"
                    description: "The country for this CSR"
                    maxLength: 2
                  State:
                    type: string
                    example: "FL"
                    description: "The state for this CSR"
                    maxLength: 80
                  Location:
                    type: string
                    example: "Plantation"
                    description: "The location for this CSR"
                    maxLength: 80
                  Organization:
                    type: string
                    example: "Thales eSecurity"
                    description: "The organization for this CSR"
                    maxLength: 80
                  OrganizationalUnit:
                    type: string
                    example: "Engineering"
                    description: "The organizational unit for this CSR"
                    maxLength: 80
                  Email:
                    type: string
                    example: "example@example.com"
                    description: "The email address associated with this CSR"
                    maxLength: 80
                  CommonName:
                    type: string
                    example: "my payShield 10K"
                    description: "The common name for the CSR"
                    maxLength: 80
              subjectAlternativeNames:
                type: string
                example: "IP:169.254.254.1"
                description: "Any subject alternative names to add for the CSR (e.g. IP: or DNS: entries)"
                maxLength: 80
      responses:
        "429":
          description: "Too many requests have been made in a given window"
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: file
  /certificate/server/install:
    post:
      tags:
      - "Certificate"
      summary: "Install signed server certificate to the payShield"
      description:  |
        The certificate file should contain a chain of trusted certificates that have issued a leaf certificate. 
        The certificate list must begin with the leaf certificate.
        Each subsequent certificate must be issued by the previous certificate.
        Restarts the OOB Server on success.
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "installCert"
      consumes:
      - "application/octet-stream"
      - "multipart/form-data"
      parameters:
      - in: formData
        name: certfile
        type: file
        required: true
        description: The certificate file to install.
      responses:
        "429":
          description: "Too many requests have been made in a given window"
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Status"
  /certificate/client/loadca:
    post:
      tags:
      - "Certificate"
      summary: "Load client CA certificate chain to the payShield"
      description:  |
        The certificate file should contain a chain of trusted certificates that issue trusted client certificates.
        Restarts the OOB Server on success.
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "loadClientCa"
      consumes:
      - "application/octet-stream"
      - "multipart/form-data"
      parameters:
      - in: formData
        name: certfile
        type: file
        required: true
        description: The certificate file to install.
      responses:
        "429":
          description: "Too many requests have been made in a given window"
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Status"
  /certificate/server/attest:
    post:
      tags:
      - "Certificate"
      summary: "Challenge the payShield to attest its validity"
      description: |
        Challenge the payShield to attest that it is officially manufactured and warranted by Thales.
        The client will send challenge data for the payShield to sign with its factory installed warrant key.
        The payShield will inject 32 bytes of random data (the nonce) into the challenge data.
        The payShield will then SHA256 this combined nonce and challenge data.
        That data will be signed with ECDSA by the private key of the payShield's factory installed warrant.
        The payShield will return in the response the base64 encoded signature, the base64 encoded random nonce data, the signing algorithm and the warrant certificate chain minus the root certificate.
        The root certificate should be received from Thales offline.
        The certificate chain sent by the payShield should be verified against the root certificate received from Thales.
        Once the entire chain has been verified, the client should use the warrant certificate to validate the signature.

        The first certificate in the chain is the warrant. The chain is sent in order.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "attest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Challenge Data"
        required: true
        schema:
          type: object
          properties:
            challenge:
              type: string
              minLength: 1
              maxLength: 256
      responses:
        "400":
          description: "Invalid Request"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              response:
                type: string
                format: byte
              nonce:
                type: string
                format: byte
              algorithm:
                type: string
              chain:
                type: array
                minItems: 3
                maxItems: 3
                items:
                  type: string
  /certificate/server/fingerprint:
    get:
      tags:
      - "Certificate"
      operationId: "getOOBFingerprint"
      summary: "Fingerprint of payShield's server certificate via OOB"
      description:  |
        If payShield's CA-signed certificate for OOB management is present, return its fingerprint.
        Otherwise get the fingerprint of payShield's self-signed certificate for OOB management.
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      produces:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/fingerprint"
  /certificate/client/allowlist:
    get:
      tags:
      - "Certificate"
      summary: "Retrieve allow list of client domain names for the OOB Interface"
      description: |
        Retrieve the current allow list.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "getAllowList"
      produces:
      - "application/json"
      responses:
        "400":
          description: "Invalid Request"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/allowlist"
    post:
      tags:
      - "Certificate"
      summary: "Set allow list of client domain names for the OOB Interface"
      description: |
        Set a list of allowed Common Names and Subject Alternative Names that can be used to access the OOB API.
        When a client attempts to use any OOB API, the SAN and CN will be checked against the allow list.
        Accepts Common Names or DNS SANs.  Do not include the "DNS:" prefix to the allow list entry.  
        For example, if the client's certificate has the SAN "DNS:hostname" the associated allow list entry would be "hostname"
        Restarts the OOB Server on success.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "setAllowList"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "allowlist"
        required: true
        schema:
          $ref: "#/definitions/allowlist"
      responses:
        "400":
          description: "Invalid Request"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
    delete:
      tags:
      - "Certificate"
      summary: "Clear allow list of client domain names for the OOB Interface"
      description: |
        Deletes any existing allow list of client domain names.
        This effectively turns off allowed client domain names checking.
        Restarts the OOB Server on success.
        ## States: 
        * DataCenter
        * Allocated
        * EndUser
      operationId: "deleteAllowList"
      responses:
        "400":
          description: "Invalid Request"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
  /certificate/server/self-signed:
    post:
      tags:
      - "Certificate"
      summary: "Generate a new self-signed payShield certificate via OOB"
      description:  |
        Generate a new self-signed payShield certificate for OOB management and return its fingerprint.
        Newly generated certificate will not be applied until the "/certificate/server/self-signed" put endpoint is called.
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "generateOobSelfSignedCert"
      consumes:
      - "application/json"
      responses:
        "400":
          description: "Client sent request with malformed or missing data"
        "405":
          description: "Method Not Allowed"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/selfSignedFingerprint"
    put:
      tags:
      - "Certificate"
      summary: "Apply the self-signed payShield certificate via OOB"
      description:  |
        Apply the self-signed payShield certificate for OOB management that was previously generated with "/certificate/server/self-signed" post endpoint and return its fingerprint.
        Restarts the OOB Server on success.
        ## States:
        * DataCenter
        * Allocated
        * EndUser
      operationId: "applyOobSelfSignedCert"
      consumes:
      - "application/json"
      responses:
        "400":
          description: "Invalid Request"
        "405":
          description: "Method Not Allowed"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/selfSignedFingerprint"
definitions:
  performanceValues:
    description: Performance capabilities
    properties:
      CPS:
        type: integer
        enum: [25, 60, 250, 1000, 2500, 10000]
        default: 25
      LMK:
        type: integer
        enum: [1, 2, 5, 10, 20]
        default: 1
  postInterface:
    type: "object"
    required:
    - "DHCP"
    - "speedConfigured"
    properties:
      DHCP:
        type: "boolean"
        description: "Whether to use DHCP"
      netName:
        type: "string"
        description: "The DHCP hostname"
        pattern: '[a-zA-Z0-9-]+$'
        minLength: 1
        maxLength: 63
      ipAddress:
        type: "string"
        format: "ipv4"
      subnetMask:
        type: "string"
        format: "ipv4"
      gateway:
        type: "string"
        format: "ipv4"
      speedConfigured:
        $ref: "#/definitions/InterfaceSpeedOptions"
    example:
      DHCP: false
      ipAddress: "169.254.254.1"
      subnetMask: "255.255.255.0"
      gateway: "169.254.254.1"
      speedConfigured: "Autoselect"
  getInterface:
    type: "object"
    required:
    - "DHCP"
    - "ipAddress"
    - "subnetMask"
    - "gateway"
    properties:
      DHCP:
        type: "boolean"
        description: "Whether to use DHCP"
        example: false
      netName:
        type: "string"
        description: "The DHCP hostname"
        pattern: '[a-zA-Z0-9-]+$'
        minLength: 1
        maxLength: 63
      ipAddress:
        type: "string"
        example: "169.254.254.1"
        format: "ipv4"
      subnetMask:
        type: "string"
        example: "255.255.255.0"
        format: "ipv4"
      gateway:
        type: "string"
        example: "169.254.254.1"
        format: "ipv4"
      macAddress:
        type: "string"
        description: "The Interface's MAC address"
        example: "00:0D:FA:33:D9:66"
      speedConfigured:
        $ref: "#/definitions/InterfaceSpeedOptions"
      speedActual:
        $ref: "#/definitions/InterfaceSpeed"
  InterfaceSpeedOptions:
    type: "string"
    enum:
      - "Autoselect"
      - "10baseT half-duplex"
      - "10baseT full-duplex"
      - "100baseT half-duplex"
      - "100baseT full-duplex"
      - "1000baseT half-duplex"
      - "1000baseT full-duplex"
      - "10000baseT half-duplex"
      - "10000baseT full-duplex"
    default: "Autoselect"
  InterfaceSpeed:
    type: "string"
    example: "1 Gbps Full-Duplex"
  fanStatus:
    type: object
    properties:
      id: 
        type: integer
        description: "The fan id who's health is being reported"
        example: 1
      serialNumber:
        type: string
        description: "Serial number of the fan"
      status:
        type: string
        description: "The health of the fan"
        example: "OK"
      speed:
        type: integer
        description: "Current RPM of the fan"
        example: 1800
      target:
        type: integer
        description: "Target RPM of the fan"
        example: 1800
  psuStatus:
    type: object
    properties:
      id: 
        type: integer
        description: "The PSU id who's health is being reported"
        example: 1
      status:
        type: string
        description: "The health of the PSU"
        example: "OK"
      serialNumber:
        type: string
        description: "Serial number of the PSU"
      modelNumber:
        type: string
        description: "Model number of the PSU"
  Status:
    type: "object"
    required:
    - "status"
    - "reason"
    properties:
      status:
        type: "string"
        description: "The result of the operation"
      reason:
        type: "string"
        description: "Reason for the result of the operation"
  Sensor:
    type: object
    properties:
      current:
        type: string
        description: "The current measurement for this sensor"
      min:
        type: string
        description: "The smallest historical measurement for this sensor"
      max:
        type: string
        description: "The largest historical measurement for this sensor"
  allowlist:
    type: object
    properties:
      allowlist:
        type: array
        minItems: 1
        maxItems: 10
        items:
          type: string
          minLength: 1
          maxLength: 256
          example: "Client Certificate CN"
  fingerprint:
    type: object
    properties:
      fingerprint:
        type: string
      isSelfSigned:
        type: boolean
        example: false
  selfSignedFingerprint:
    type: object
    properties:
      fingerprint:
        type: string
      status:
        type: "string"
        description: "The result of the operation"
      reason:
        type: "string"
        description: "Reason for the result of the operation"
